---

- name: ansible filter examples
  hosts: localhost
  vars:
    martin:
      name: Martin D'veloper
      job: Developer
      skills:
        - ansible
        - python
        - perl
        - ruby
      url: https://github.com/frankhjung/ansible-filters

  tasks:

    - block:

      - name: show data structure
        debug:
          var: martin

      tags: always

    # create
    - block:

      - name: list skills
        debug:
          var: item
        with_items: "{{ martin.skills }}"

      - name: count the items in martin.skills
        set_fact:
          skills_length: "{{ martin.skills | length }}"

      - name: show skills count
        debug:
          msg: "martin has {{ skills_length }} skills"

      tags: create

    # subset
    - block:

      - name: list skills
        debug:
          var: item
        with_items: "{{ martin.skills }}"

      - name: show skills starting with 'p'
        debug:
          var: item
        when: item is match('p.*')
        loop: "{{ martin.skills }}"

      - name: show skills except 'perl'
        debug:
          var: item
        when: not item is match('perl')
        loop: "{{ martin.skills }}"

      tags: subset

    # manipulate
    - block:

      - name: show name
        debug:
          var: martin.name

      - debug:
          msg: "{{ martin.name | list | length }}"

      - name: show job
        debug:
          var: martin.job

      - name: list skills
        debug:
          var: item
        with_items: "{{ martin.skills }}"

      - name: sort skills
        debug:
          var: item
        with_items: "{{ martin.skills | sort(reverse=True) }}"

      - name: change job to lowercase
        debug:
          msg: "{{ martin.job | lower }}"

      - name: capitalize skills
        debug:
          msg: "{{ item | capitalize }}"
        with_items: "{{ martin.skills }}"

      tags: manipulate

    # regex
    - block:

        - name: search using regex named group
          debug:
            msg: "{{ martin.url | regex_replace('.*/(?P<name>.+)$', '\\g<name>') }}"

        - name: search using regex numbered group
          debug:
            msg: "{{ martin.url | regex_replace('.*/(.+)$', '\\1') }}"

      tags: regex

    # other
    - block:

      - name: write data structure to yaml file
        copy:
          content: "{{ martin | to_nice_yaml(indent=4) }}"
          dest: 'files/martin.yaml'

      - debug:
          var: martin.name

      - name: split name using python
        debug:
          msg: "{{ martin.name.split(' ') }}"

      tags: other

    # test filter plugin
    - block:

      - debug:
          var: martin.name

      - name: count number of occurrences of 'r' in name
        set_fact:
          counter: "{{ martin.name | count('r') }}"

      - name: test there are exactly 2 occurrences
        assert:
          that: counter | int == 2
          msg: "expect counter to be 2 got {{ counter }}"

      tags: test

    # omit if parameter not provided
    - block:

      - set_fact:
          emptyValue: ''
          whiteSpace: '   '

      - name: default result from debug on no msg or var
        debug:

      - name: omit if value is just whitespace
        debug:
          msg: "{{ whiteSpace | trim | default({}) or omit }}"

      - name: omit if value is empty and not a number
        debug:
          msg: "{{ emptyValue | trim | int or omit }}"

      - name: test if empty
        assert:
          that: not emptyValue
          success_msg: variable is empty
          fail_msg: expected empty variable

      - name: test if not empty
        assert:
          that: not whiteSpace | bool
          success_msg: variable is not empty
          fail_msg: expected non-empty variable

      tags: omit

    # numerics
    - block:

      - set_fact:
          number: -13

      - name: test if numeric
        debug:
          msg: "{{ number | int or omit }}"

      - name: test value
        assert:
          that: number | int == -13
          msg: "expect number of -13 got {{ number }}"

      - name: test method
        assert:
          that: number | abs == 13
          msg: "expect number of 13 got {{ number | abs }}"

      tags: numerics

    # environment variables
    - block:

      - name: get home from environment
        set_fact:
          temp_home: "{{ lookup('env','HOME') }}"

      - name: check home exists
        assert:
          that: temp_home is defined
          success_msg: home exists and is "{{ temp_home }}"
          fail_msg: expected home in environment

      - name: get non-existent variable from environment
        set_fact:
          temp_xyz: "{{ lookup('env','XYZ') }}"

      - name: check XYZ does not exist
        assert:
          that: not temp_xyz is defined or not temp_xyz
          success_msg: temp_xyz does not exist or is empty
          fail_msg: unexpected value for "{{ temp_xyz }}"

      tags: env
